<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)"
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   layout="absolute">
	
	<fx:Script>
		<![CDATA[
			import org.as3openni.AS3OpenNI;
			import org.as3openni.faast.FAAST;
			import org.as3openni.faast.events.FAASTEvent;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.objects.NiPoint2D;
			import org.as3openni.objects.NiPoint3D;
			import org.as3openni.objects.NiSkeleton;
			import org.as3openni.openni.events.ONISkeletonEvent;
			import org.as3openni.openni.events.ONIUserTrackingEvent;
			import org.as3openni.util.math.NiPoint3DUtil;
			import org.papervision3d.core.geom.Lines3D;
			import org.papervision3d.materials.special.LineMaterial;
			
			// Setup the AS3OpenNI client and server.
			private var _as3OpenNI:AS3OpenNI;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			// Setup the skeletons 3D world.
			private var _skeletons3DWorld:Skeletons3DWorld;
			private var _faast:FAAST;
			
			protected function init(event:Event):void
			{
				this.setupFAASTEventListeners();
				this.setupSkeletons3DWorld();
				
				if(!this._runAppOnly)
				{
					this._as3OpenNI = new AS3OpenNI();
					this._as3OpenNI.binaryPath = "bin/AS3OpenNI_Alpha_1.0.9";
					this._as3OpenNI.debug = true;
					this._as3OpenNI.userTracking = true;
					this._as3OpenNI.init();
					
					this.addSessionListeners();
					this.addUserTrackingListeners();
				}
			}
			
			protected function setupFAASTEventListeners():void
			{
				// Setup.
				this._faast = new FAAST();
				
				/*// Left Arm.
				this._faast.addEventListener(FAASTEvent.LEFT_ARM_OUT, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_ARM_UP, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_ARM_DOWN, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_ARM_FORWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_ARM_ACCROSS, onFAASTEvent);
				
				// Right Arm.
				this._faast.addEventListener(FAASTEvent.RIGHT_ARM_OUT, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_ARM_UP, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_ARM_DOWN, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_ARM_FORWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_ARM_ACCROSS, onFAASTEvent);
				
				// Left Leg.
				this._faast.addEventListener(FAASTEvent.LEFT_FOOT_SIDEWAYS, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_FOOT_FORWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_FOOT_BACKWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEFT_FOOT_UP, onFAASTEvent);
				
				// Right Leg.
				this._faast.addEventListener(FAASTEvent.RIGHT_FOOT_SIDEWAYS, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_FOOT_FORWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_FOOT_BACKWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.RIGHT_FOOT_UP, onFAASTEvent);
				
				// Full Body Gestures.
				this._faast.addEventListener(FAASTEvent.CROUCHED, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.JUMPING, onFAASTEvent);
				
				// Action events.
				this._faast.addEventListener(FAASTEvent.WALKING, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEAN_LEFT, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEAN_RIGHT, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEAN_FORWARD, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.LEAN_BACKWARD, onFAASTEvent);*/
				
				this._faast.addEventListener(FAASTEvent.TURN_LEFT, onFAASTEvent);
				this._faast.addEventListener(FAASTEvent.TURN_RIGHT, onFAASTEvent);
			}
			
			protected function setupSkeletons3DWorld():void
			{
				this._skeletons3DWorld = new Skeletons3DWorld();
				this._skeletons3DWorldContainer.addChild(this._skeletons3DWorld);
			}
			
			protected function addSessionListeners():void
			{
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function addUserTrackingListeners():void
			{
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_NEW_USER, newUser);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_LOST_USER, userLost);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_POSE_DETECTED, userPoseDetected);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_START, userCalibrationStarted);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_COMPLETE, userCalibrationComplete);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_FAILED, userCalibrationFailed);
				this._as3OpenNI.addEventListener(ONISkeletonEvent.USER_TRACKING, skeleton);
			}
			
			protected function removeUserTrackingListeners():void
			{
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_NEW_USER, newUser);
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_LOST_USER, userLost);
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_POSE_DETECTED, userPoseDetected);
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_START, userCalibrationStarted);
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_COMPLETE, userCalibrationComplete);
				this._as3OpenNI.removeEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_FAILED, userCalibrationFailed);
				this._as3OpenNI.removeEventListener(ONISkeletonEvent.USER_TRACKING, skeleton);
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				//trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				//trace('Session Ended');
			}
			
			protected function newUser(event:ONIUserTrackingEvent):void
			{
				//trace('New User Found: ' + event.user);
				this._statusField.text = 'New User Found: ' + event.user;
			}
			
			protected function userLost(event:ONIUserTrackingEvent):void
			{
				//trace('Lost User: ' + event.user);
				this._statusField.text = 'Lost User: ' + event.user;
				this._skeletons3DWorld.removeUser(event.user);
			}
			
			protected function userPoseDetected(event:ONIUserTrackingEvent):void
			{
				//trace('Pose Detected for User: ' + event.user);
				this._statusField.text = 'Pose Detected for User: ' + event.user;
			}
			
			protected function userCalibrationStarted(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Started for User: ' + event.user);
				this._statusField.text = 'Calibration Started for User: ' + event.user;
			}
			
			protected function userCalibrationComplete(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Complete for User: ' + event.user);
				this._statusField.text = 'Calibration Complete for User: ' + event.user;
				this._skeletons3DWorld.startRendering();
			}
			
			protected function userCalibrationFailed(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Failed for User: ' + event.user);
				this._statusField.text = 'Calibration Failed for User: ' + event.user;
				this._skeletons3DWorld.removeUser(event.user);
			}
			
			protected function skeleton(event:ONISkeletonEvent):void
			{
				if(!this._skeletons3DWorld.checkIfUserExist(event.user))
				{
					this._skeletons3DWorld.addUser(event.user);
				}
				else
				{
					var skeleton:NiSkeleton = event.skeleton as NiSkeleton;
					this._skeletons3DWorld.skeleton = skeleton;
					this._faast.configure(skeleton);
				}
			}
			
			protected function onFAASTEvent(event:FAASTEvent):void
			{
				trace(event.type + ', distance: ' + event.distance + ', distance2: ' + event.distance2 + ', angle:' + event.angle);
			}
		]]>
	</fx:Script>
	
	<mx:Box id="_statusBox" backgroundColor="#CCCCCC" verticalAlign="middle" paddingRight="10"
			horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="10">
		<mx:Label id="_statusField" text="STATUS" fontWeight="bold" fontSize="25" color="#EEEEEE"/>
	</mx:Box>
	
	<mx:UIComponent id="_skeletons3DWorldContainer" width="800" height="600"/>
	
</mx:WindowedApplication>
