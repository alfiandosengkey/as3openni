<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)"
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   layout="absolute">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.as3openni.AS3OpenNI;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.objects.NiPoint2D;
			import org.as3openni.objects.NiPoint3D;
			import org.as3openni.objects.NiSkeleton;
			import org.as3openni.openni.events.ONISkeletonEvent;
			import org.as3openni.openni.events.ONIUserTrackingEvent;
			import org.as3openni.util.math.NiPoint3DUtil;
			import org.papervision3d.core.geom.Lines3D;
			import org.papervision3d.materials.special.LineMaterial;
			
			// Setup the AS3OpenNI client and server.
			private var _as3OpenNI:AS3OpenNI;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			// Setup the skeletons 3D world.
			private var _user1SkelWorld:Skeletons3DWorld;
			private var _user2SkelWorld:Skeletons3DWorld;

			// Array collections.
			private var _pointsCollection:ArrayCollection = new ArrayCollection();
			private var _skeletonsCollection:ArrayCollection = new ArrayCollection();
			
			protected function init(event:Event):void
			{
				this.setupSkeletons3DWorld();

				if(!this._runAppOnly)
				{
					this._as3OpenNI = new AS3OpenNI();
					this._as3OpenNI.binaryPath = "bin/AS3OpenNI_Alpha_1.3.0";
					this._as3OpenNI.debug = true;
					this._as3OpenNI.traceLog = false;
					this._as3OpenNI.userTracking = true;
					this._as3OpenNI.init();
					
					this.addSessionListeners();
					this.addUserTrackingListeners();
				}
			}
			
			protected function setupSkeletons3DWorld():void
			{
				this._user1SkelWorld = new Skeletons3DWorld();
				this._user2SkelWorld = new Skeletons3DWorld();
				this._skeletons.addChild(this._user1SkelWorld);
				this._skeletons.addChild(this._user2SkelWorld);
				this._user2SkelWorld.alpha = .7;
			}

			protected function addSessionListeners():void
			{
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function addUserTrackingListeners():void
			{
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_NEW_USER, newUser);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_LOST_USER, userLost);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_POSE_DETECTED, userPoseDetected);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_START, userCalibrationStarted);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_COMPLETE, userCalibrationComplete);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_FAILED, userCalibrationFailed);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_FOUND, userFound);
				this._as3OpenNI.addEventListener(ONISkeletonEvent.USER_TRACKING, skeleton);
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				//trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				//trace('Session Ended');
			}
			
			protected function userFound(event:ONIUserTrackingEvent):void
			{
				//trace('User: ' + event.user + ', Single-Point: ' + event.userSinglePoint.toString());
				//this._statusField.text = 'User: ' + event.user + ', Single-Point: ' + event.userSinglePoint.toString();
				
				// Setup the Single-Point balls.
				var ballPoint:UIComponent = this.ballPointLookup(event.user);
				if(ballPoint)
				{
					var point3D:NiPoint3D = event.userSinglePoint as NiPoint3D;
					var obj:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(point3D, this.stage.stageWidth, this.stage.stageHeight);
					
					if(point3D)
					{
						ballPoint.x = obj.pointX;
						ballPoint.y = obj.pointY/2;
					}
				}
			}
			
			protected function newUser(event:ONIUserTrackingEvent):void
			{
				this.removeBallPoint(event.user);
				if(event.user == 1) this._user1SkelWorld.removeUser(event.user);
				if(event.user == 2) this._user2SkelWorld.removeUser(event.user);
				
				//trace('New User Found: ' + event.user);
				this._statusField.text = 'New User Found: ' + event.user;
				
				// Add each user's single point ball.
				var ballPoint:UIComponent = new UIComponent();
				ballPoint.graphics.beginFill(0xFF0000);
				ballPoint.graphics.drawCircle(0,0,20);
				ballPoint.graphics.endFill();
				this._singlePoints.addChild(ballPoint);
				this._pointsCollection.addItem({user:event.user, ball:ballPoint});
			}
			
			protected function userLost(event:ONIUserTrackingEvent):void
			{
				//trace('Lost User: ' + event.user);
				this._statusField.text = 'Lost User: ' + event.user;
				this.removeBallPoint(event.user);
				if(event.user == 1) this._user1SkelWorld.removeUser(event.user);
				if(event.user == 2) this._user2SkelWorld.removeUser(event.user);
			}
			
			protected function ballPointLookup(user:Number):UIComponent
			{
				var ballPoint:UIComponent;
				for(var i:Number = 0; i < this._pointsCollection.length; i++)
				{
					var obj:Object = this._pointsCollection.getItemAt(i);
					if(user == obj.user) ballPoint = obj.ball as UIComponent;
				}
				return ballPoint;
			}
			
			protected function removeBallPoint(user:Number):void
			{
				for(var i:Number = 0; i < this._pointsCollection.length; i++)
				{
					var obj:Object = this._pointsCollection.getItemAt(i);
					if(user == obj.user) 
					{
						var ballPoint:UIComponent = obj.ball as UIComponent;
						this._singlePoints.removeChild(ballPoint);
						this._pointsCollection.removeItemAt(i);
					}
				}
			}
			
			protected function userPoseDetected(event:ONIUserTrackingEvent):void
			{
				//trace('Pose Detected for User: ' + event.user);
				this._statusField.text = 'Pose Detected for User: ' + event.user;
			}
			
			protected function userCalibrationStarted(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Started for User: ' + event.user);
				this._statusField.text = 'Calibration Started for User: ' + event.user;
			}
			
			protected function userCalibrationComplete(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Complete for User: ' + event.user);
				this._statusField.text = 'Calibration Complete for User: ' + event.user;
				this.removeBallPoint(event.user);
				
				if(event.user == 1)
				{
					this._user1SkelWorld.startRendering();
					this._user1SkelWorld.addUser(event.user);
				}
				
				if(event.user == 2)
				{
					this._user2SkelWorld.startRendering();
					this._user2SkelWorld.addUser(event.user);
				}
			}
			
			protected function userCalibrationFailed(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Failed for User: ' + event.user);
				this._statusField.text = 'Calibration Failed for User: ' + event.user;
			}
			
			protected function skeleton(event:ONISkeletonEvent):void
			{
				if(event.user == 1) this._user1SkelWorld.skeleton = event.skeleton;
				if(event.user == 2) this._user2SkelWorld.skeleton = event.skeleton;
			}
		]]>
	</fx:Script>
	
	<mx:Box id="_statusBox" backgroundColor="#CCCCCC" verticalAlign="middle" paddingRight="10"
			horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="10">
		<mx:Label id="_statusField" text="STATUS" fontWeight="bold" fontSize="25" color="#EEEEEE"/>
	</mx:Box>
	
	<mx:UIComponent id="_skeletons" width="800" height="600"/>
	<mx:UIComponent id="_singlePoints" width="800" height="600" alpha=".5"/>
	
</mx:WindowedApplication>
