<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)" 
			   horizontalAlign="left"
			   verticalAlign="top" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   layout="absolute">
	
	<fx:Script>
		<![CDATA[
			import com.senocular.ui.IVirtualMouseEvent;
			import com.senocular.ui.VirtualMouse;
			
			import org.as3openni.AS3OpenNI;
			import org.as3openni.nite.events.NiteCircleEvent;
			import org.as3openni.nite.events.NiteGestureEvent;
			import org.as3openni.nite.events.NitePointEvent;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.nite.events.NiteSliderEvent;
			import org.as3openni.nite.events.NiteTrackPadEvent;
			import org.as3openni.objects.NiPoint2D;
			import org.as3openni.objects.NiPoint3D;
			import org.as3openni.openni.events.ONICaptureEvent;
			import org.as3openni.openni.events.ONISkeletonEvent;
			import org.as3openni.openni.events.ONIUserTrackingEvent;
			import org.as3openni.util.math.NiPoint3DUtil;
			
			private var _as3OpenNIBridge:NativeProcess;
			private var _as3OpenNIServer:AS3OpenNI;
			
			private var _virtualMouse:VirtualMouse;
			private var _currentX:Number = 0;
			private var _currentY:Number = 0;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			// For the depth camera/rgb testing.
			private var _depthMapCanvas:BitmapData = new BitmapData(AS3OpenNI.VGA_MAX_WIDTH, AS3OpenNI.VGA_MAX_HEIGHT, false, 0);
			private var _rgbCanvas:BitmapData = new BitmapData(AS3OpenNI.VGA_MAX_WIDTH, AS3OpenNI.VGA_MAX_HEIGHT, false, 0);
			
			[Bindable]
			private var _depthMapBmp:Bitmap;
			
			[Bindable]
			private var _rgbBmp:Bitmap;
			
			protected function init(event:Event):void
			{
				System.gc();
				
				if(!this._runAppOnly)
				{
					if(this._as3OpenNIServer) this._as3OpenNIServer.closeSockets();
					this._virtualMouse = new VirtualMouse(this.stage, this._cursor.x, this._cursor.y);
					this._virtualMouse.ignore(this._cursor);
					
					this._depthMapBmp = new Bitmap(this._depthMapCanvas);
					this._rgbBmp = new Bitmap(this._rgbCanvas);
					
					this._as3OpenNIServer = new AS3OpenNI();
					this.addListeners();
					this.addSingleHandPointListeners();
					this.addGestureListeners();
					this.addCircleListeners();
					this.addSliderListeners();
					this.addTrackPadListeners();
					this.addUserTrackingListeners();
					this.addDepthMapCaptureListeners();
					this.addRGBCaptureListeners();
					
					if(NativeProcess.isSupported)
					{
						this.runAS3OpenNIClient();
					}
				}
				
				// Draw left/right hand tracking bals.
				this._leftHandBall.graphics.beginFill(0xFF0000);
				this._leftHandBall.graphics.drawCircle(0,0,40);
				this._leftHandBall.graphics.endFill();
				
				this._rightHandBall.graphics.beginFill(0xFF0000);
				this._rightHandBall.graphics.drawCircle(0,0,40);
				this._rightHandBall.graphics.endFill();
			}
			
			protected function mouseMove(event:MouseEvent):void
			{
				if(event is IVirtualMouseEvent)
				{
					this._cursor.x = this._virtualMouse.x;
					this._cursor.y = this._virtualMouse.y;
				}
			}
			
			protected function runAS3OpenNIClient():void
			{     
				var file:File = new File();
				var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				
				if (Capabilities.os.toLowerCase().indexOf("win") > -1)
				{
					file = File.applicationDirectory.resolvePath("Bin/AS3OpenNI_Alpha_1.0.8.exe");
				} 
				else if (Capabilities.os.toLowerCase().indexOf("mac") > -1) 
				{
					file = File.applicationDirectory.resolvePath("Bin/AS3OpenNI_Alpha_1.0.8");
				}
				
				/**
				 * By default on startup all the features of the AS3OpenNI client are turned OFF, 
				 * however if you'd like to turn certain features on for use in your application
				 * you can pass certain process arguments to the client to turn on those features. 
				 */
				var processArgs:Vector.<String> = new Vector.<String>();
				
				// Turn on the SinglePoint feature.
				//processArgs.push("-ospf");
				
				// Turn on the Gesture feature.
				//processArgs.push("-ogf");
				
				// Turn on the Circle feature.
				//processArgs.push("-ocf");
				
				// Turn on the Slider feature.
				//processArgs.push("-osldf");
				
				// Turn on the TrackPad feature.
				//processArgs.push("-otpf");
				
				/*// Change the number of TrackPad columns.
				processArgs.push("-tpc");
				processArgs.push("8"); // default is 4.*/
				
				/*// Change the number of TrackPad rows.
				processArgs.push("-tpr");
				processArgs.push("16"); // default is 9.*/
				
				// Turn on the UserTracking feature.
				//processArgs.push("-outf");
				
				// PLEASE READ THIS: I've never tested running both feeds
				// Turn on the DepthMapCapture feature only testing one or the other in this file.
				processArgs.push("-odmc");
				
				// Set the DepthMapCapture quality, default is 0 = Low, 1 = Average, 2 = High, 3 = Super High.
				processArgs.push("-dmq");
				processArgs.push("0");
				
				// Turn on the RGBCapture feature only testing one or the other in this file.
				processArgs.push("-orgbc");
				
				// Set the RGBCapture quality, default is 0 = Low, 1 = Average, 2 = High, 3 = Super High.
				processArgs.push("-rgbq");
				processArgs.push("0");
				
				// Sets the RGBCapture to render in greyscale.
				//processArgs.push("-grey");
				
				// Snap the pixels of the DepthMap and RGB together or not, default is false.
				//processArgs.push("-snap");
				
				nativeProcessStartupInfo.arguments = processArgs;
				nativeProcessStartupInfo.executable = file;
				
				this._as3OpenNIBridge = new NativeProcess();
				this._as3OpenNIBridge.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, this.onOutputData);
				this._as3OpenNIBridge.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, this.onErrorData);
				this._as3OpenNIBridge.addEventListener(NativeProcessExitEvent.EXIT, this.onExit);
				this._as3OpenNIBridge.start(nativeProcessStartupInfo);
			}
			
			protected function onClose(event:Event):void
			{
				if(this._as3OpenNIBridge) this._as3OpenNIBridge.exit(true);
			}
			
			protected function onOutputData(event:ProgressEvent):void
			{
				var msg:String = this._as3OpenNIBridge.standardOutput.readMultiByte(this._as3OpenNIBridge.standardOutput.bytesAvailable, File.systemCharset);
				trace("Output:", msg);
			}
			
			protected function onErrorData(event:ProgressEvent):void
			{
				var ba:Number = this._as3OpenNIBridge.standardOutput.bytesAvailable;
				if(ba > 0)
				{
					trace("ERROR:", this._as3OpenNIBridge.standardError.readMultiByte(ba, File.systemCharset));
				}
				this._as3OpenNIBridge.closeInput();
			}
			
			protected function onExit(event:NativeProcessExitEvent):void
			{
				if(!this._runAppOnly)
				{
					if(this._as3OpenNIServer) this._as3OpenNIServer.closeSockets();
				}
			}
			
			protected function addListeners():void
			{
				NativeApplication.nativeApplication.addEventListener(Event.EXITING, onClose);
				this.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
				
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function addSingleHandPointListeners():void
			{
				this._as3OpenNIServer.singlePoint.addEventListener(NitePointEvent.POINT_DETECTED, pointDetected);
			}
			
			protected function addGestureListeners():void
			{
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.PUSH, pushDetected);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.WAVE, waveDetected);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.SWIPE_UP, swipeUp);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.SWIPE_DOWN, swipeDown);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.SWIPE_LEFT, swipeLeft);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.SWIPE_RIGHT, swipeRight);
				this._as3OpenNIServer.session.addEventListener(NiteGestureEvent.STEADY, steadyDetected);
			}
			
			protected function addCircleListeners():void
			{
				this._as3OpenNIServer.session.addEventListener(NiteCircleEvent.ANGLE, circleAngle);
				this._as3OpenNIServer.session.addEventListener(NiteCircleEvent.NO_CIRCLE, noCircle);
			}
			
			protected function addSliderListeners():void
			{
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_LEFT_RIGHT_VALUE, sliderLeftRightValue);
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_UP_DOWN_VALUE, sliderUpDownValue);
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_IN_OUT_VALUE, sliderInOutValue);
			}
			
			protected function addTrackPadListeners():void
			{
				this._as3OpenNIServer.session.addEventListener(NiteTrackPadEvent.TRACKPAD_HOVER, trackPadHover);
			}
			
			protected function addUserTrackingListeners():void
			{
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_NEW_USER, newUser);
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_LOST_USER, userLost);
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_POSE_DETECTED, userPoseDetected);
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_START, userCalibrationStarted);
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_COMPLETE, userCalibrationComplete);
				this._as3OpenNIServer.userTracking.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_FAILED, userCalibrationFailed);
				this._as3OpenNIServer.userTracking.addEventListener(ONISkeletonEvent.USER_TRACKING, skeleton);
			}
			
			protected function addDepthMapCaptureListeners():void
			{
				this.stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE, windowChanged);
				this._as3OpenNIServer.depthMap.addEventListener(ONICaptureEvent.ONI_DEPTH_MAP, getDepthMap);
			}
			
			protected function addRGBCaptureListeners():void
			{
				this._as3OpenNIServer.video.addEventListener(ONICaptureEvent.ONI_RGB, getRGB);
			}
			
			protected function windowChanged(event:NativeWindowDisplayStateEvent):void
			{
				var state:String = this.stage.nativeWindow.displayState;
				if(state == NativeWindowDisplayState.MINIMIZED)
				{
					this._as3OpenNIServer.depthMap.removeEventListener(ONICaptureEvent.ONI_DEPTH_MAP, getDepthMap);
					this._as3OpenNIServer.video.removeEventListener(ONICaptureEvent.ONI_RGB, getRGB);
				}
				else
				{
					setTimeout(restartCapturing, 3000);
				}
			}
			
			protected function restartCapturing():void
			{
				this._as3OpenNIServer.depthMap.addEventListener(ONICaptureEvent.ONI_DEPTH_MAP, getDepthMap);
				this._as3OpenNIServer.video.addEventListener(ONICaptureEvent.ONI_RGB, getRGB);
			}
			
			protected function getDepthMap(event:ONICaptureEvent):void
			{
				this._depthMapLoader.unloadAndStop();
				this._depthMapLoader.source = event.bytes;
			}
			
			protected function getRGB(event:ONICaptureEvent):void
			{
				this._rgbLoader.unloadAndStop();
				this._rgbLoader.source = event.bytes;
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				trace('Session Ended');
			}
			
			protected function newUser(event:ONIUserTrackingEvent):void
			{
				trace('New User Found: ' + event.user);
			}
			
			protected function userLost(event:ONIUserTrackingEvent):void
			{
				trace('Lost User: ' + event.user);
			}
			
			protected function userPoseDetected(event:ONIUserTrackingEvent):void
			{
				trace('Pose Detected for User: ' + event.user);
			}
			
			protected function userCalibrationStarted(event:ONIUserTrackingEvent):void
			{
				trace('Calibration Started for User: ' + event.user);
			}
			
			protected function userCalibrationComplete(event:ONIUserTrackingEvent):void
			{
				trace('Calibration Complete for User: ' + event.user);
			}
			
			protected function userCalibrationFailed(event:ONIUserTrackingEvent):void
			{
				trace('Calibration Failed for User: ' + event.user);
			}
			
			protected function skeleton(event:ONISkeletonEvent):void
			{
				var leftHand3D:NiPoint3D = event.leftHand as NiPoint3D;
				var rightHand3D:NiPoint3D = event.rightHand as NiPoint3D;
				if(leftHand3D && rightHand3D)
				{
					var sw:Number = this.stage.stageWidth;
					var sh:Number = this.stage.stageHeight;
					
					var leftHand:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(leftHand3D, sw, sh);
					var rightHand:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(rightHand3D, sw, sh);
					
					this._leftHandBall.x = leftHand.pointX;
					this._leftHandBall.y = leftHand.pointY;
					
					this._rightHandBall.x = rightHand.pointX;
					this._rightHandBall.y = rightHand.pointY;
				}
			}
			
			protected function trackPadHover(event:NiteTrackPadEvent):void
			{
				trace('TrackPad-Hover Column: ' + event.column);
				trace('TrackPad-Hover Row: ' + event.row);
				trace('TrackPad-Hover Direction: ' + event.direction);
			}
			
			protected function sliderLeftRightValue(event:NiteSliderEvent):void
			{
				trace('Left/Right Dir: ' + event.direction);
				trace('Left/Right Value: ' + event.value);
			}
			
			protected function sliderUpDownValue(event:NiteSliderEvent):void
			{
				trace('Up/Down Dir: ' + event.direction);
				trace('Up/Down Value: ' + event.value);
			}
			
			protected function sliderInOutValue(event:NiteSliderEvent):void
			{
				trace('In/Out Dir: ' + event.direction);
				trace('In/Out Value: ' + event.value);
			}
			
			protected function circleAngle(event:NiteCircleEvent):void
			{
				trace('Circle Angle: ' + event.angle);
				trace('Clockwise: ' + event.clockwise);
			}
			
			protected function noCircle(event:NiteCircleEvent):void
			{
				trace('No Circle Found');
			}
			
			protected function pushDetected(event:NiteGestureEvent):void
			{
				trace('Push Detected - Velocity: ' + event.velocity + ', Angle: ' + event.angle);
			}
			
			protected function waveDetected(event:NiteGestureEvent):void
			{
				trace('Wave Detected');
			}
			
			protected function swipeUp(event:NiteGestureEvent):void
			{
				trace('Swipe Up - Velocity: ' + event.velocity + ', Angle: ' + event.angle);
			}
			
			protected function swipeDown(event:NiteGestureEvent):void
			{
				trace('Swipe Down - Velocity: ' + event.velocity + ', Angle: ' + event.angle);
			}
			
			protected function swipeLeft(event:NiteGestureEvent):void
			{
				trace('Swipe Left - Velocity: ' + event.velocity + ', Angle: ' + event.angle);
			}
			
			protected function swipeRight(event:NiteGestureEvent):void
			{
				trace('Swipe Right - Velocity: ' + event.velocity + ', Angle: ' + event.angle);
			}
			
			protected function steadyDetected(event:NiteGestureEvent):void
			{
				trace('Steady Hand - Velocity: ' + event.velocity);
			}
			
			protected function pointDetected(event:NitePointEvent):void
			{
				var point3D:NiPoint3D = event.point3D as NiPoint3D;
				var obj:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(point3D, this.stage.stageWidth, this.stage.stageHeight);
				this._currentX = obj.pointX;
				this._currentY = obj.pointY;
				
				if(point3D)
				{
					this._virtualMouse.lock();
					this._virtualMouse.x = this._currentX;
					this._virtualMouse.y = this._currentY;
					this._virtualMouse.unlock();
				}
			}

			protected function _depthMapLoader_completeHandler(event:Event):void
			{
				this._depthMapCanvas.draw(this._depthMapLoader.content);
			}
			
			protected function _rgbLoader_completeHandler(event:Event):void
			{
				this._rgbCanvas.draw(this._rgbLoader.content);
			}
		]]>
	</fx:Script>
	
	<mx:Canvas x="50" y="50">
		<!-- DepthMap Capture -->
		<mx:Canvas clipContent="true">
			<mx:Image id="_depthMapLoader" width="320" height="240" 
					  complete="_depthMapLoader_completeHandler(event)" visible="false"/>
			<mx:Image id="_depthMapFeed" width="320" height="240" source="{this._depthMapBmp}" />
		</mx:Canvas>
		
		<!-- RGB Capture -->
		<mx:Canvas x="330" clipContent="true">
			<mx:Image id="_rgbLoader" width="320" height="240" 
					  complete="_rgbLoader_completeHandler(event)" visible="false" />
			<mx:Image id="_rgbFeed" width="320" height="240" source="{this._rgbBmp}" />
		</mx:Canvas>
	</mx:Canvas>
	
	<mx:Image id="_cursor" source="@Embed('../proj-assets/swf/hand.swf')" scaleX="2.5" scaleY="2.5"/>
	<mx:UIComponent id="_leftHandBall" />
	<mx:UIComponent id="_rightHandBall" />
	
</mx:WindowedApplication>
