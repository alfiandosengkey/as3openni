<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)"
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   layout="absolute">
	
	<fx:Script>
		<![CDATA[
			import org.as3openni.AS3OpenNI;
			import org.as3openni.events.AS3OpenNIEvent;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.objects.NiPoint2D;
			import org.as3openni.objects.NiPoint3D;
			import org.as3openni.openni.events.ONISkeletonEvent;
			import org.as3openni.openni.events.ONIUserTrackingEvent;
			import org.as3openni.util.math.NiPoint3DUtil;
			
			// Setup the AS3OpenNI client and server.
			private var _as3OpenNI:AS3OpenNI;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			protected function init(event:Event):void
			{
				if(!this._runAppOnly)
				{
					this._as3OpenNI = new AS3OpenNI();
					this._as3OpenNI.addEventListener(AS3OpenNIEvent.READY, onReady);
					this._as3OpenNI.binaryPath = "bin/AS3OpenNI_Alpha_1.3.0";
					this._as3OpenNI.debug = true;
					this._as3OpenNI.userTracking = true;
					this._as3OpenNI.depthMap = true;
					this._as3OpenNI.init();
					
					this.addSessionListeners();
					this.addUserTrackingListeners();
				}
			}
			
			protected function onReady(event:AS3OpenNIEvent):void
			{
				this.addEventListener(Event.ENTER_FRAME, onRender);
				this._as3OpenNI.removeEventListener(AS3OpenNIEvent.READY, onReady);
			}
			
			protected function onRender(event:Event):void
			{
				if(this._as3OpenNI.isReady())
				{
					this._as3OpenNI.getDepthBuffer();
					this._as3OpenNI.getUserTrackingBuffer();
					this._as3OpenNI.getSkeletonsBuffer();
				}
			}
			
			protected function addSessionListeners():void
			{
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function addUserTrackingListeners():void
			{
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_NEW_USER, newUser);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_LOST_USER, userLost);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_POSE_DETECTED, userPoseDetected);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_START, userCalibrationStarted);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_COMPLETE, userCalibrationComplete);
				this._as3OpenNI.addEventListener(ONIUserTrackingEvent.USER_TRACKING_USER_CALIBRATION_FAILED, userCalibrationFailed);
				this._as3OpenNI.addEventListener(ONISkeletonEvent.USER_TRACKING, skeleton);
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				trace('Session Ended');
			}
			
			protected function newUser(event:ONIUserTrackingEvent):void
			{
				//trace('New User Found: ' + event.user);
				this._statusField.text = 'New User Found: ' + event.user;
			}
			
			protected function userLost(event:ONIUserTrackingEvent):void
			{
				//trace('Lost User: ' + event.user);
				this._statusField.text = 'Lost User: ' + event.user;
			}
			
			protected function userPoseDetected(event:ONIUserTrackingEvent):void
			{
				trace('Pose Detected for User: ' + event.user);
				this._statusField.text = 'Pose Detected for User: ' + event.user;
			}
			
			protected function userCalibrationStarted(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Started for User: ' + event.user);
				this._statusField.text = 'Calibration Started for User: ' + event.user;
			}
			
			protected function userCalibrationComplete(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Complete for User: ' + event.user);
				this._statusField.text = 'Calibration Complete for User: ' + event.user;
			}
			
			protected function userCalibrationFailed(event:ONIUserTrackingEvent):void
			{
				//trace('Calibration Failed for User: ' + event.user);
				this._statusField.text = 'Calibration Failed for User: ' + event.user;
			}
			
			protected function skeleton(event:ONISkeletonEvent):void
			{
				var leftHand3D:NiPoint3D = event.leftHand as NiPoint3D;
				var rightHand3D:NiPoint3D = event.rightHand as NiPoint3D;
				
				if(leftHand3D && rightHand3D)
				{
					var sw:Number = this.stage.stageWidth;
					var sh:Number = this.stage.stageHeight;
					
					var leftHand:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(leftHand3D, sw, sh);
					var rightHand:NiPoint2D = NiPoint3DUtil.convertRealWorldToScreen(rightHand3D, sw, sh);
					
					this._leftHandBox.x = leftHand.pointX;
					this._leftHandBox.y = leftHand.pointY;
					
					this._rightHandBox.x = rightHand.pointX;
					this._rightHandBox.y = rightHand.pointY;
				}
			}
		]]>
	</fx:Script>
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Box id="_statusBox" backgroundColor="#CCCCCC" verticalAlign="middle" paddingRight="10"
				horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="10">
			<mx:Label id="_statusField" text="STATUS" fontWeight="bold" fontSize="25" color="#EEEEEE"/>
		</mx:Box>
	</mx:VBox>
	
	<mx:Box id="_leftHandBox" backgroundColor="#FF0000" verticalAlign="middle" paddingRight="10"
			horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="10">
		<mx:Label text="LEFT" fontWeight="bold" fontSize="35" color="#FFFFFF"/>
	</mx:Box>
	
	<mx:Box id="_rightHandBox" x="130" backgroundColor="#FF0000" verticalAlign="middle" paddingRight="10"
			horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="10">
		<mx:Label text="RIGHT" fontWeight="bold" fontSize="35" color="#FFFFFF"/>
	</mx:Box>
	
</mx:WindowedApplication>
