<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)" 
			   horizontalAlign="left"
			   verticalAlign="middle" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off">
	
	<fx:Script>
		<![CDATA[
			import org.as3openni.AS3OpenNI;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.nite.events.NiteSliderEvent;
			
			private var _as3OpenNIClient:NativeProcess;
			private var _as3OpenNIServer:AS3OpenNI;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			protected function init(event:Event):void
			{
				if(!this._runAppOnly)
				{
					if(this._as3OpenNIServer) this._as3OpenNIServer.closeSockets();
					
					this._as3OpenNIServer = new AS3OpenNI();
					this.addListeners();
					this.addSliderListeners();
					
					if(NativeProcess.isSupported)
					{
						this.runAS3OpenNIClient();
					}
				}
			}
		
			protected function runAS3OpenNIClient():void
			{     
				var file:File = new File();
				var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				
				if (Capabilities.os.toLowerCase().indexOf("win") > -1)
				{
					file = File.applicationDirectory.resolvePath("Bin/AS3OpenNI_Alpha_1.0.8.exe");
				} 
				else if (Capabilities.os.toLowerCase().indexOf("mac") > -1) 
				{
					file = File.applicationDirectory.resolvePath("Bin/AS3OpenNI_Alpha_1.0.8");
				}
				
				// Turn on the Slider feature.
				var processArgs:Vector.<String> = new Vector.<String>();
				processArgs.push("-osldf");
				
				nativeProcessStartupInfo.arguments = processArgs;
				nativeProcessStartupInfo.executable = file;
				
				this._as3OpenNIClient = new NativeProcess();
				this._as3OpenNIClient.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, this.onOutputData);
				this._as3OpenNIClient.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, this.onErrorData);
				this._as3OpenNIClient.addEventListener(NativeProcessExitEvent.EXIT, this.onExit);
				this._as3OpenNIClient.start(nativeProcessStartupInfo);
			}
			
			protected function onClose(event:Event):void
			{
				if(this._as3OpenNIClient) this._as3OpenNIClient.exit(true);
			}
			
			protected function onOutputData(event:ProgressEvent):void
			{
				var msg:String = this._as3OpenNIClient.standardOutput.readMultiByte(this._as3OpenNIClient.standardOutput.bytesAvailable, File.systemCharset);
				trace("Output:", msg);
			}
			
			protected function onErrorData(event:ProgressEvent):void
			{
				trace("ERROR:", this._as3OpenNIClient.standardError.readMultiByte(this._as3OpenNIClient.standardOutput.bytesAvailable, File.systemCharset));
				this._as3OpenNIClient.closeInput();
			}
			
			protected function onExit(event:NativeProcessExitEvent):void
			{
				if(!this._runAppOnly)
				{
					if(this._as3OpenNIServer) this._as3OpenNIServer.closeSockets();
				}
			}
			
			protected function addListeners():void
			{
				NativeApplication.nativeApplication.addEventListener(Event.EXITING, onClose);
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNIServer.session.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function addSliderListeners():void
			{
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_LEFT_RIGHT_VALUE, sliderLeftRightValue);
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_UP_DOWN_VALUE, sliderUpDownValue);
				this._as3OpenNIServer.slider.addEventListener(NiteSliderEvent.SLIDER_IN_OUT_VALUE, sliderInOutValue);
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				trace('Session Ended');
			}
			
			protected function sliderLeftRightValue(event:NiteSliderEvent):void
			{
				//trace('Left/Right Dir: ' + event.direction);
				//trace('Left/Right Value: ' + event.value);
				
				var val:Number = ((this._leftRightArea.width - 30) * event.value);
				this._leftRightBar.x = (val > 15) ? val : 15;
			}
			
			protected function sliderUpDownValue(event:NiteSliderEvent):void
			{
				//trace('Up/Down Dir: ' + event.direction);
				//trace('Up/Down Value: ' + event.value);
				
				var val:Number = ((this._upDownArea.height - 30) * event.value);
				this._upDownBar.y = (val > 15) ? val : 15;
			}
			
			protected function sliderInOutValue(event:NiteSliderEvent):void
			{
				//trace('In/Out Dir: ' + event.direction);
				//trace('In/Out Value: ' + event.value);
				
				var boxWidth:Number = ((this._inOutArea.width - 25) * event.value);
				var boxHeight:Number = ((this._inOutArea.height - 25) * event.value);
				this._inOutBox.width = (boxWidth > 15) ? boxWidth : 15;
				this._inOutBox.height = (boxHeight > 15) ? boxHeight : 15;
			}
		]]>
	</fx:Script>
	
	<mx:HBox>
		<mx:Box id="_upDownArea" width="100" height="400" backgroundColor="#FF0000"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				horizontalAlign="center" verticalAlign="top" paddingTop="15" paddingBottom="15">
			<mx:Box id="_upDownBar" width="75" height="15" backgroundColor="#FFFFFF" />
		</mx:Box>
		<mx:Spacer width="25" />
		<mx:Box id="_inOutArea" width="400" height="400" backgroundColor="#FF0000"
				horizontalAlign="center" verticalAlign="middle">
			<mx:Box id="_inOutBox" width="375" height="375" backgroundColor="#FFFFFF" />
		</mx:Box>
	</mx:HBox>
	<mx:Spacer height="25" />
	<mx:Box id="_leftRightArea" width="600" height="100" backgroundColor="#FF0000"
			horizontalAlign="left" verticalAlign="middle" paddingLeft="15" paddingRight="15">
		<mx:Box id="_leftRightBar" width="15" height="75" backgroundColor="#FFFFFF" />
	</mx:Box>
	
</mx:WindowedApplication>
