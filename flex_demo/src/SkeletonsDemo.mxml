<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						layout="absolute"
						horizontalAlign="left"
						verticalAlign="top"
						addedToStage="init(event)"
						minWidth="800" minHeight="600"
						frameRate="180"
						backgroundGradientColors="[#CCCCCC,#333333]"
						horizontalScrollPolicy="off"
						verticalScrollPolicy="off">
	<fx:Script>
		<![CDATA[
			import flash.filters.BlurFilter;
			
			import org.as3openni.AS3OpenNI;
			import org.as3openni.events.AS3OpenNIEvent;
			import org.as3openni.events.openni.OpenNIEvent;
			import org.as3openni.events.openni.SkeletonEvent;
			import org.as3openni.events.openni.UserTrackingEvent;
			import org.as3openni.global.Definitions;
			import org.as3openni.objects.NiPoint3D;
			import org.as3openni.objects.NiSkeleton;
			import org.as3openni.util.BitmapUtil;
			
			private var _flexUIOnly:Boolean = false;
			private var _as3OpenNI:AS3OpenNI;
			private var _videoCanvas:BitmapData = new BitmapData(Definitions.VGA_MAX_WIDTH, Definitions.VGA_MAX_HEIGHT, false, 0);
			private var _depthCanvas:BitmapData = new BitmapData(Definitions.VGA_MAX_WIDTH, Definitions.VGA_MAX_HEIGHT, false, 0);
			
			[Bindable]
			private var _videoBmp:Bitmap;
			
			[Bindable]
			private var _depthBmp:Bitmap;
			
			protected function init(event:Event):void
			{
				// Define bitmaps to draw on to.
				this._videoBmp = new Bitmap(this._videoCanvas);
				this._depthBmp = new Bitmap(this._depthCanvas);
				
				// Run AS3OpenNI.
				if(!this._flexUIOnly)
				{
					this._as3OpenNI = new AS3OpenNI();
					this._as3OpenNI.addEventListener(AS3OpenNIEvent.READY, onReady);
					this._as3OpenNI.binaryPath = 'bin/AS3OpenNI-Bridge';
					this._as3OpenNI.debug = true;
					this._as3OpenNI.video = true;
					this._as3OpenNI.depthMap = true;
					this._as3OpenNI.depthMapBackground = false;
					this._as3OpenNI.userTracking = true;
					this._as3OpenNI.init();
				}
			}
			
			protected function onReady(event:AS3OpenNIEvent):void
			{
				this.addEventListener(Event.ENTER_FRAME, onRender);
				this._as3OpenNI.removeEventListener(AS3OpenNIEvent.READY, onReady);
				this._as3OpenNI.addEventListener(OpenNIEvent.ON_VIDEO, onVideo);
				this._as3OpenNI.addEventListener(OpenNIEvent.ON_DEPTH, onDepth);
				this._as3OpenNI.addEventListener(OpenNIEvent.USER_FOUND, onUserFound);
				this._as3OpenNI.addEventListener(OpenNIEvent.USER_LOST, onUserLost);
				this._as3OpenNI.addEventListener(OpenNIEvent.POSE_DETECTED, onPoseDetected);
				this._as3OpenNI.addEventListener(OpenNIEvent.CALIBRATION_STARTED, onCalibStart);
				this._as3OpenNI.addEventListener(OpenNIEvent.CALIBRATION_COMPLETE, onCalibComplete);
				this._as3OpenNI.addEventListener(OpenNIEvent.CALIBRATION_FAILED, onCalibFailed);
				this._as3OpenNI.addEventListener(UserTrackingEvent.USER_TRACKED, onUsersTracked);
				this._as3OpenNI.addEventListener(SkeletonEvent.SKELETONS, onSkeletons);
			}
			
			protected function onRender(event:Event):void
			{
				if(this._as3OpenNI.isReady())
				{
					this._as3OpenNI.getSkeletonsBuffer();
					this._as3OpenNI.getUserTrackingBuffer();
					this._as3OpenNI.getVideoBuffer();
					this._as3OpenNI.getDepthBuffer();
				}
			}
			
			protected function onVideo(event:OpenNIEvent):void
			{
				this._videoCanvas.fillRect(this._videoCanvas.rect, 0);
				var buff:ByteArray = event.data as ByteArray;
				BitmapUtil.byteArrayToBitmapData(buff, this._videoCanvas);
			}
			
			protected function onDepth(event:OpenNIEvent):void
			{
				this._depthCanvas.fillRect(this._depthCanvas.rect, 0);
				var buff:ByteArray = event.data as ByteArray;
				BitmapUtil.byteArrayToBitmapData(buff, this._depthCanvas);
			}
			
			protected function onUserFound(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('User Found: ' + userId);
			}
			
			protected function onUserLost(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('User Lost: ' + userId);
			}
			
			protected function onPoseDetected(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('Pose Detected: ' + userId);
			}
			
			protected function onCalibStart(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('Calibration Started: ' + userId);
			}
			
			protected function onCalibComplete(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('Calibration Complete: ' + userId);
			}
			
			protected function onCalibFailed(event:OpenNIEvent):void
			{
				var userId:Number = event.data as Number;
				trace('Calibration Failed: ' + userId);
			}
			
			protected function onUsersTracked(event:UserTrackingEvent):void
			{
				var userId:uint = event.userId;
				var point3D:NiPoint3D = event.point3d;
				//trace('User: ' + userId + ', ' + point3D.toString());
			}
			
			protected function onSkeletons(event:SkeletonEvent):void
			{
				var userId:uint = event.userId;
				var skeleton:NiSkeleton = event.skeleton;
				/*trace('Head: ' + skeleton.head.toString());
				trace('Neck: ' + skeleton.neck.toString());
				trace('Torso: ' + skeleton.torso.toString());
				trace('L-Shoulder: ' + skeleton.leftShoulder.toString());
				trace('L-Elbow: ' + skeleton.leftElbow.toString());
				trace('L-Hand: ' + skeleton.leftHand.toString());
				trace('R-Shoulder: ' + skeleton.rightShoulder.toString());
				trace('R-Elbow: ' + skeleton.rightElbow.toString());
				trace('R-Hand: ' + skeleton.rightHand.toString());
				trace('L-Hip: ' + skeleton.leftHip.toString());
				trace('L-Knee: ' + skeleton.leftKnee.toString());
				trace('L-Foot: ' + skeleton.leftFoot.toString());
				trace('R-Hip: ' + skeleton.rightHip.toString());
				trace('R-Knee: ' + skeleton.rightKnee.toString());
				trace('R-Foot: ' + skeleton.rightFoot.toString());*/
			}
		]]>
	</fx:Script>
	
	<mx:VBox verticalAlign="bottom" height="100%" width="100%">
		<mx:HBox width="100%" height="240" verticalAlign="bottom" horizontalAlign="center">
			<mx:Image id="_videoBox" source="{this._videoBmp}" width="320" height="240" cacheAsBitmap="true"/>
			<mx:Spacer width="100%" />
			<mx:Image id="_depthBox" source="{this._depthBmp}" width="320" height="240" cacheAsBitmap="true"/>
		</mx:HBox>
	</mx:VBox>
	
	
</mx:WindowedApplication>
