<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="800" minHeight="600"
			   addedToStage="init(event)"
			   layout="absolute"
			   horizontalAlign="left"
			   verticalAlign="top" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   resizing="resizingHandler()"
			   backgroundColor="#000000">
	
	<fx:Script>
		<![CDATA[
			import com.quasimondo.bitmapdata.ThresholdBitmap;
			
			import flash.filters.BlurFilter;
			
			import mx.events.ResizeEvent;
			import mx.events.StateChangeEvent;
			
			import net.hires.debug.Stats;
			
			import org.as3openni.AS3OpenNI;
			import org.as3openni.nite.events.NiteSessionEvent;
			import org.as3openni.openni.events.ONICaptureEvent;

			// Setup the AS3OpenNI client and server.
			private var _as3OpenNI:AS3OpenNI;
			
			// Run or debug application.
			private var _runAppOnly:Boolean = false;
			
			// For the depth camera/rgb testing.
			private var _depthMapCanvas:BitmapData = new BitmapData(AS3OpenNI.VGA_MAX_WIDTH, AS3OpenNI.VGA_MAX_HEIGHT, false, 0);
			private var _rgbCanvas:BitmapData = new BitmapData(AS3OpenNI.VGA_MAX_WIDTH, AS3OpenNI.VGA_MAX_HEIGHT);
			private var _maskCanvas:BitmapData = new BitmapData(AS3OpenNI.VGA_MAX_WIDTH, AS3OpenNI.VGA_MAX_HEIGHT, true, 0x00000000);
			
			[Bindable]
			private var _depthMapBmp:Bitmap;
			
			[Bindable]
			private var _rgbBmp:Bitmap;
			
			[Bindable]
			private var _thresholdBmp:Bitmap;
			
			[Bindable]
			private var _maskBmp:Bitmap;
			
			// Setup the threshold map.
			private var _thresholdMap:ThresholdBitmap;
			
			protected function init(event:Event):void
			{
				// Setup garbage collection.
				System.gc();
				
				// Setup the DepthMap bitmap and the RGB bitmap.
				this._depthMapBmp = new Bitmap(this._depthMapCanvas);
				this._rgbBmp = new Bitmap(this._rgbCanvas);
				this._maskBmp = new Bitmap(this._maskCanvas);
				
				// Setup the threshold bitmap.
				this._thresholdMap = new ThresholdBitmap(this._depthMapBmp.bitmapData);
				this._thresholdMap.mode = ThresholdBitmap.ENTROPY;
				this._thresholdMap.smooth = 6; //0-16.
				this._thresholdMap.adaptiveTolerance = 50; //0-255.
				this._thresholdMap.thresholdValue = 127; //0-255.
				this._thresholdMap.adaptiveRadius = 32; //0-255.
				this._thresholdMap.applyDespeckle = true;
				this._thresholdMap.applyEdges = false;
				this._thresholdBmp = new Bitmap(this._thresholdMap);
				
				// Stats object by Mr.Doob.
				var stats:Stats = new Stats();
				this._stats.addChild(stats);
				
				if(!this._runAppOnly)
				{
					this._as3OpenNI = new AS3OpenNI();
					this._as3OpenNI.binaryPath = "bin/AS3OpenNI_Alpha_1.0.9";
					this._as3OpenNI.debug = true;
					
					this._as3OpenNI.depthMap = true;
					this._as3OpenNI.depthMapQuality = 0;
					this._as3OpenNI.depthMapBackground = false;
					this._as3OpenNI.depthMapSnap = true;
					
					this._as3OpenNI.video = true;
					this._as3OpenNI.videoQuality = 2;
					this._as3OpenNI.videoGrayscale = true;
					this._as3OpenNI.init();
					
					this.addSessionListeners();
					this._as3OpenNI.addEventListener(ONICaptureEvent.ONI_DEPTH_MAP, getDepthMap);
					this._as3OpenNI.addEventListener(ONICaptureEvent.ONI_RGB, getRGB);
				}
				
				// Setup stage listeners.
				this.stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE, trackState);
				
				// Apply the mask.
				this._rgbFeed.mask = this._maskFeed;
			}
			
			protected function addSessionListeners():void
			{
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_STARTED, sessionStarted);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_PROGRESS, sessionProgress);
				this._as3OpenNI.addEventListener(NiteSessionEvent.SESSION_ENDED, sessionEnded);
			}
			
			protected function sessionStarted(event:NiteSessionEvent):void
			{
				trace('Session Started');
			}
			
			protected function sessionProgress(event:NiteSessionEvent):void
			{
				trace('Session Progress');
			}
			
			protected function sessionEnded(event:NiteSessionEvent):void
			{
				trace('Session Ended');
			}
			
			protected function getDepthMap(event:ONICaptureEvent):void
			{
				this._depthMapLoader.unloadAndStop();
				this._depthMapLoader.source = event.bytes;
			}
			
			protected function getRGB(event:ONICaptureEvent):void
			{
				this._rgbLoader.unloadAndStop();
				this._rgbLoader.source = event.bytes;
			}
			
			protected function _depthMapLoader_completeHandler(event:Event):void
			{
				this._depthMapCanvas.fillRect(this._depthMapCanvas.rect, 0);
				this._depthMapCanvas.draw(this._depthMapLoader.content);
				this._thresholdMap.fillRect(this._thresholdMap.rect, 0);
				this._thresholdMap.render();
				this.keying();
			}
			
			protected function keying():void
			{
				var bf:BlurFilter = new BlurFilter(6, 6, 3);
				var bmd:BitmapData = this._thresholdBmp.bitmapData;
				
				this._maskCanvas.fillRect(this._maskCanvas.rect, 0);
				this._maskCanvas.threshold(bmd, bmd.rect, new Point(0,0), "==", 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, false);
				this._maskCanvas.applyFilter(this._maskCanvas, this._maskCanvas.rect, new Point(0,0), bf);
			}
			
			protected function _rgbLoader_completeHandler(event:Event):void
			{
				this._rgbCanvas.fillRect(this._rgbCanvas.rect, 0);
				this._rgbCanvas.draw(this._rgbLoader.content);
			}

			protected function resizingHandler():void
			{
				this._bgImg.width = this._rgbFeed.width = this.stage.stageWidth;
				this._bgImg.height = this._rgbFeed.height = this.stage.stageHeight;
				
				this._maskFeed.width = this.stage.stageWidth - 18;
				this._maskFeed.height = this.stage.stageHeight - 18;
			}
			
			protected function trackState(event:NativeWindowDisplayStateEvent):void
			{
				this.resizingHandler();
			}
		]]>
	</fx:Script>
	
	<mx:Canvas>
		<!-- RGB & DepthMap Capture -->
		<mx:Canvas clipContent="false" visible="false">
			<mx:Image id="_depthMapLoader" width="320" height="240" complete="_depthMapLoader_completeHandler(event)"/>
			<mx:Image id="_rgbLoader" x="330" width="320" height="240" complete="_rgbLoader_completeHandler(event)"/>
		</mx:Canvas>
		
		<!-- RGB & Beach Image Display -->
		<mx:Canvas clipContent="false" visible="true">
			<!-- Background Image -->
			<mx:Image id="_bgImg" width="800" height="600" smoothBitmapContent="true" 
					  source="@Embed('../proj-assets/img/beach.jpg')" cacheAsBitmap="true"
					  maintainAspectRatio="false"/>
			<!-- RGB Feed -->
			<mx:Image id="_rgbFeed" width="800" height="600" visible="true" cacheAsBitmap="true" 
					  source="{this._rgbBmp}" maintainAspectRatio="false" />	
		</mx:Canvas>
		
		<!-- Mask Display -->
		<mx:Canvas clipContent="false" visible="true">
			<!-- The Mask Feed for the RGB Feed -->
			<mx:Image id="_maskFeed" width="798" height="598" source="{this._maskBmp}"
					  maintainAspectRatio="false" visible="true" cacheAsBitmap="true"/>
		</mx:Canvas>
	</mx:Canvas>
	
	<mx:UIComponent id="_stats" />
	
</mx:WindowedApplication>
